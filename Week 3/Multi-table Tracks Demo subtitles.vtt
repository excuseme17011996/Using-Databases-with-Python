WEBVTT

1
00:00:08.823 --> 00:00:10.910
Okay, so now we're going to
cross the streams.

2
00:00:10.910 --> 00:00:15.110
We are going to connect XML and databases.

3
00:00:15.110 --> 00:00:17.730
Later we'll do HTML and databases and
JSON and databases, but for

4
00:00:17.730 --> 00:00:19.148
now we're going to do XML and databases.

5
00:00:19.148 --> 00:00:24.930
And we're going to do the music database
that I talked about in the lecture,

6
00:00:24.930 --> 00:00:28.000
except that we're going to
pull out my iTunes library and

7
00:00:28.000 --> 00:00:29.920
put it into a music database.

8
00:00:29.920 --> 00:00:36.210
So it turns out that if you go into iTunes
and you say like file/library/export or

9
00:00:36.210 --> 00:00:40.810
something like that, you get an XML
file that looks exactly like this.

10
00:00:40.810 --> 00:00:42.980
And if we take a look at this XML file,

11
00:00:42.980 --> 00:00:47.240
it is a property list. That's
what plist stands for.

12
00:00:47.240 --> 00:00:51.930
That's a big Apple thing. And then they have
dictionaries, which are key/value pairs.

13
00:00:51.930 --> 00:00:56.340
So it's a key with integer, key/value
pair, key/value, key/value, key/value.

14
00:00:56.340 --> 00:00:59.670
This is just a XML
serialization of dictionaries.

15
00:00:59.670 --> 00:01:02.940
What's interesting is they can have
the dictionary that contains a dictionary

16
00:01:02.940 --> 00:01:04.460
that contains a dictionary.

17
00:01:04.460 --> 00:01:09.450
So if you look through you will
see that there's dictionaries, and

18
00:01:09.450 --> 00:01:12.960
the ones that are actually tracks
have a key of Track ID and

19
00:01:12.960 --> 00:01:16.190
then name, artist, composer,
album, genre, etc.

20
00:01:16.190 --> 00:01:17.350
Does this all look very familiar?

21
00:01:17.350 --> 00:01:19.870
And if you cruise down
you see more tracks.

22
00:01:19.870 --> 00:01:20.890
You see more tracks.

23
00:01:20.890 --> 00:01:23.010
And there are lots and lots of things.

24
00:01:23.010 --> 00:01:27.490
And I've given you, for better or for
worse, I've given you my playlist in XML.

25
00:01:27.490 --> 00:01:31.730
And so what we're basically going to do
is we're going to read this file and

26
00:01:31.730 --> 00:01:34.550
we're going to through
all the dictionary items.

27
00:01:34.550 --> 00:01:36.530
And we're looking for
things that have key of Track ID.

28
00:01:36.530 --> 00:01:40.952
And then we're going to extract the name,
artist, the composer, the album,

29
00:01:40.952 --> 00:01:44.130
the size, the time, etc.,
and pull these things out.

30
00:01:45.360 --> 00:01:48.700
So if you take a look at our code, we're
going to use ElementTree, which we've used

31
00:01:48.700 --> 00:01:53.070
before, and we're going to use SQLite
as our way to talk to the database.

32
00:01:53.070 --> 00:01:56.690
And so by this point some of this
should become pretty normal.

33
00:01:56.690 --> 00:02:00.490
We're going to establish a connection
that trackdb.sqlite is the disk,

34
00:02:00.490 --> 00:02:02.200
the file on disk.

35
00:02:02.200 --> 00:02:03.490
Then we get ourselves a cursor because

36
00:02:03.490 --> 00:02:05.310
the cursor is the way we
actually send the commands.

37
00:02:05.310 --> 00:02:08.270
And the first thing we're going
to do is create some tables.

38
00:02:08.270 --> 00:02:11.990
And we use a little different technique
here. If we want to reset this,

39
00:02:11.990 --> 00:02:14.930
we actually just remove this
file then it recreates it.

40
00:02:14.930 --> 00:02:17.420
And I'm using a CREATE
TABLE IF NOT EXISTS.

41
00:02:17.420 --> 00:02:21.090
And so this is a way that basically says
this does absolutely nothing if the table

42
00:02:21.090 --> 00:02:22.240
already exists.

43
00:02:22.240 --> 00:02:24.970
So this code can run many, many times.

44
00:02:24.970 --> 00:02:27.880
The other examples,
I show you how to drop the table.

45
00:02:27.880 --> 00:02:29.050
It's up to you how you do this.

46
00:02:29.050 --> 00:02:32.270
And it depends often on how your
application is going to work.

47
00:02:32.270 --> 00:02:37.180
So this basically says create the table
if it doesn't exist, using the ID and

48
00:02:37.180 --> 00:02:38.340
name, and all the stuff.

49
00:02:38.340 --> 00:02:42.270
An the thing that's a little
different here is this name is unique.

50
00:02:42.270 --> 00:02:43.996
And we're going to use it as logical key.

51
00:02:43.996 --> 00:02:46.670
So I'm going to add a little
unique attribute to this,

52
00:02:46.670 --> 00:02:51.100
to say I can't store two of
two identical names in there.

53
00:02:51.100 --> 00:02:55.770
And I'm doing this very much on purpose,
which you're going to see in a bit.

54
00:02:55.770 --> 00:02:58.970
So I'm going to create the Artist table,
I'm going to create the Album table.

55
00:02:58.970 --> 00:03:01.440
Again this is just triple-quoted strings.

56
00:03:01.440 --> 00:03:04.610
And I'll create the Track table
pretty much right off of those things.

57
00:03:04.610 --> 00:03:08.980
Now I haven't done Genre yet, I'm trying to
keep this one a little bit simpler.

58
00:03:08.980 --> 00:03:12.330
And so then what we do is we
read the name of the file.

59
00:03:12.330 --> 00:03:17.830
And if I press enter I'll use Library.xml,
which is this exact file here.

60
00:03:17.830 --> 00:03:23.420
And then I create a function, which we'll
go back and talk to here, called lookup,

61
00:03:23.420 --> 00:03:28.520
that basically is our way of going through
a dictionary and finding like name,

62
00:03:28.520 --> 00:03:32.740
find the key, and then go to the exact
next tab and find the value.

63
00:03:32.740 --> 00:03:38.458
So it's a way to parse key/value pairs
out of this XML dictionary object.

64
00:03:39.580 --> 00:03:41.761
But we'll come back to that in a second.

65
00:03:41.761 --> 00:03:47.137
And so what we do here is we are going
to call ET, ElementTree.parse.

66
00:03:47.137 --> 00:03:51.313
And if you use the parse method inside
of ElementTree, then you just give it

67
00:03:51.313 --> 00:03:55.748
a file name. So we don't have to even read
this file, because ElementTree is doing

68
00:03:55.748 --> 00:04:00.770
the file reading for us. And then we get
an object, stuff, that we can work with.

69
00:04:00.770 --> 00:04:03.700
And similar to our previous thing,
in that object

70
00:04:03.700 --> 00:04:05.760
we're going to call the findall method.

71
00:04:05.760 --> 00:04:08.490
And we're looking for three-deep
dictionaries.

72
00:04:08.490 --> 00:04:10.590
A dictionary within a
dictionary within a dictionary.

73
00:04:10.590 --> 00:04:14.270
And so, that's basically dictionary
within dictionary within dictionary.

74
00:04:14.270 --> 00:04:17.170
And so it's all these dictionaries
at the third level in.

75
00:04:17.170 --> 00:04:21.810
I mentioned before that XML was better at
dealing with hierarchical data than JSON.

76
00:04:21.810 --> 00:04:24.940
And actually, these will probably
be equivalent in JSON and XML,

77
00:04:24.940 --> 00:04:29.190
but we're saying I'm going to go through
all the dictionaries that are three deep.

78
00:04:29.190 --> 00:04:31.680
And so then I get a number of them,
some number.

79
00:04:31.680 --> 00:04:33.510
I print out how many of these things.

80
00:04:33.510 --> 00:04:35.870
I get kind of an array of
objects at that point.

81
00:04:35.870 --> 00:04:37.380
And then I loop through them all.

82
00:04:37.380 --> 00:04:42.050
And so this loop, for entry in all, well
all is just a list of this is the first

83
00:04:42.050 --> 00:04:47.380
dictionary, and
this is the second dictionary,

84
00:04:47.380 --> 00:04:51.330
and the third dictionary, and so
that way I'm looping through the XML bits.

85
00:04:52.810 --> 00:04:56.520
Each of the entry value, you know for
each time it goes through the loop,

86
00:04:56.520 --> 00:05:02.445
entry is basically the XML object
that represents a dict object, right?

87
00:05:02.445 --> 00:05:03.920
D-I-C-T object.

88
00:05:03.920 --> 00:05:08.810
And so I have written a thing that starts
here and looks for one of these things,

89
00:05:08.810 --> 00:05:11.470
whatever string I want to read,
and then it looks to the next one.

90
00:05:11.470 --> 00:05:14.780
So, if you take a look at that code,
that's this lookup.

91
00:05:14.780 --> 00:05:19.690
And so, what it does is it,
d is an iterable, so

92
00:05:19.690 --> 00:05:21.420
I can iterate through all the tags.

93
00:05:21.420 --> 00:05:26.090
That's a tag, that's a tag, that's a tag,
that's a tag, that's a tag.

94
00:05:26.090 --> 00:05:32.340
And all I'm doing is, I'm looking for
the key that I'm looking for, right?

95
00:05:32.340 --> 00:05:34.372
And I say found, because found is false.

96
00:05:34.372 --> 00:05:38.430
And if the child.tag name is key, and

97
00:05:38.430 --> 00:05:42.870
the text in between them, remember
that the text is this stuff in between.

98
00:05:42.870 --> 00:05:44.770
So that's the .text.

99
00:05:44.770 --> 00:05:48.140
This is the name of the tag,
this is the text within the tag.

100
00:05:48.140 --> 00:05:53.930
So, if the tag I found is a key tag and
the stuff in between the tag is,

101
00:05:53.930 --> 00:05:56.750
I probably misused it, is
this key I'm looking for,

102
00:05:56.750 --> 00:05:59.390
which is like the string name or whatever.

103
00:05:59.390 --> 00:06:01.030
I'm using the key twice.

104
00:06:01.030 --> 00:06:02.020
But, okay, whatever.

105
00:06:02.020 --> 00:06:03.270
I say found equals true and

106
00:06:03.270 --> 00:06:07.760
then it goes up and then next time through
the loop it returns the child's text.

107
00:06:07.760 --> 00:06:10.036
And that way I can loop through.

108
00:06:10.036 --> 00:06:14.889
Loop through [SOUND] looking for
total time, I find total time, and

109
00:06:14.889 --> 00:06:18.961
then I go to the next tag and
I return the text for that.

110
00:06:18.961 --> 00:06:22.861
And so that's how I can loop
through this whole structure,

111
00:06:22.861 --> 00:06:26.519
find that thing, and
return that thing, right?

112
00:06:26.519 --> 00:06:30.460
And whatever, I might find the artist's
name and then return Queen. Okay?

113
00:06:32.000 --> 00:06:37.940
So that basically is my little gadget that
takes one of these dictionary entries and

114
00:06:37.940 --> 00:06:38.974
returns the thing I want.

115
00:06:40.075 --> 00:06:41.925
So then I've got lookup.

116
00:06:41.925 --> 00:06:44.065
And so I don't want things that
aren't tracks.

117
00:06:44.065 --> 00:06:45.805
So I just check to see.

118
00:06:45.805 --> 00:06:49.535
Oh, and by the way, my little guy
returns None if there's nothing found,

119
00:06:49.535 --> 00:06:52.410
which is a very Pythonic way to do it.

120
00:06:52.410 --> 00:06:55.720
So if I look the entry Track ID
up in my dictionary,

121
00:06:55.720 --> 00:07:00.326
then if I find None I continue so I'm just
skipping the ones that aren't real tracks.

122
00:07:00.326 --> 00:07:03.550
Then I'm going to pull out the name,
artist, album, count, rating and

123
00:07:03.550 --> 00:07:08.000
length using these,
our little keys that sit in this XML.

124
00:07:08.000 --> 00:07:12.960
All right, zippity do da into XML. And so
now I have variables name, artist, album,

125
00:07:12.960 --> 00:07:16.120
count, rating, and length, and
I'm going to do some sanity checking.

126
00:07:16.120 --> 00:07:19.250
If the name is empty or the artist
is empty, or the album is empty,

127
00:07:19.250 --> 00:07:22.810
I'm going to skip that track,
because I want to have these things.

128
00:07:22.810 --> 00:07:26.130
So I now know that and
I'm going to print out the name,

129
00:07:26.130 --> 00:07:31.110
artist, album, count, rating, and
length. So now I have data, right?

130
00:07:32.440 --> 00:07:34.050
And I'm going to do an INSERT statement.

131
00:07:34.050 --> 00:07:35.510
So, here's the interesting thing.

132
00:07:35.510 --> 00:07:41.740
And this goes back to, in the Artist
table, the name is unique.

133
00:07:41.740 --> 00:07:43.850
Again, I'm going to use
this as my logical key.

134
00:07:43.850 --> 00:07:45.230
The name is unique, so

135
00:07:45.230 --> 00:07:51.430
I can't insert the same name twice and
so if this is Led Zeppelin and

136
00:07:51.430 --> 00:07:55.940
I try to insert Led Zeppelin a second
time that would be a failure.

137
00:07:55.940 --> 00:08:00.212
But I can take and kind of cheatly
take advantage of this, right?

138
00:08:00.212 --> 00:08:04.880
Because it's going to fail,
so I say insert and

139
00:08:04.880 --> 00:08:10.150
kind of think of if something goes
wrong ignore, so INSERT OR IGNORE.

140
00:08:10.150 --> 00:08:13.310
Which means you either insert it
if it's not already there, and

141
00:08:13.310 --> 00:08:14.850
if it's already there, you ignore it.

142
00:08:14.850 --> 00:08:15.380
Okay?

143
00:08:15.380 --> 00:08:18.950
So it's like insert, oops come back,
it's INSERT INTO Artist, but

144
00:08:18.950 --> 00:08:20.710
ignore it if it's already there.

145
00:08:20.710 --> 00:08:25.410
And so Artist is the table, name is
the column, values is a keyword, and

146
00:08:25.410 --> 00:08:26.780
there's one question mark in here.

147
00:08:26.780 --> 00:08:30.570
And that the question mark, of course,
corresponds to the first entry in our

148
00:08:30.570 --> 00:08:34.760
little one-tuple, because that again is
a tuple and it's a one-item tuple.

149
00:08:34.760 --> 00:08:37.850
You've still got to say
parenthesis thing comma blah.

150
00:08:37.850 --> 00:08:42.500
And that's you get a one-tuple.
It's kind of a funky bit Python syntax.

151
00:08:42.500 --> 00:08:43.310
And so that's a tuple.

152
00:08:44.630 --> 00:08:48.910
But the net result is, if the artist
doesn't exist in the table Artist,

153
00:08:48.910 --> 00:08:50.740
it inserts it. If not, it doesn't.

154
00:08:50.740 --> 00:08:54.700
And remember, because I got a 
primary key on this guy,

155
00:08:54.700 --> 00:08:56.880
id is going to automatically be assigned.

156
00:08:56.880 --> 00:09:01.100
So the immediate next thing
that I do is I do SELECT id

157
00:09:01.100 --> 00:09:05.300
FROM Artist where name equals this guy,
the one we just inserted.

158
00:09:05.300 --> 00:09:09.250
It might have been inserted a long time
ago or it might have just been inserted.

159
00:09:09.250 --> 00:09:13.690
But no matter what, we're going to get the
id of either the recently inserted one or

160
00:09:13.690 --> 00:09:14.740
the one that's been there, right?

161
00:09:14.740 --> 00:09:18.340
So this INSERT may or may not happen,
but the SELECT is going to happen.

162
00:09:18.340 --> 00:09:19.640
And it's going to give us the id.

163
00:09:19.640 --> 00:09:21.858
And so we're going to use the cursor.

164
00:09:21.858 --> 00:09:26.470
We're going to grab one row. Because
it's unique it should only get one row.

165
00:09:26.470 --> 00:09:29.440
Sub zero means the first thing,
which gives us this id guy.

166
00:09:29.440 --> 00:09:33.620
And then we're just going to put that
in as an integer into artist_id.

167
00:09:33.620 --> 00:09:39.100
So artist_id is the primary
key that got inserted when

168
00:09:39.100 --> 00:09:41.540
that artist got inserted,
if that makes sense.

169
00:09:41.540 --> 00:09:46.150
So this is like a little idiom of
insert or ignore and then select using

170
00:09:46.150 --> 00:09:50.990
the logical key twice to figure out
what the primary key of the artist,

171
00:09:50.990 --> 00:09:53.060
whether we inserted it or
just looked it up.

172
00:09:54.910 --> 00:09:58.200
And then we do a similar thing for
the album title.

173
00:09:59.320 --> 00:10:04.650
Album title I've got marked as unique, right,
the album title here is marked as unique

174
00:10:04.650 --> 00:10:09.220
so I've got that. And so I'm going to
say INSERT OR IGNORE INTO Album.

175
00:10:09.220 --> 00:10:14.040
Now, because Album has a foreign
key to the artist, right,

176
00:10:14.040 --> 00:10:18.720
remember from the lecture, so the title
goes in and the artist_id goes in.

177
00:10:18.720 --> 00:10:23.650
So this is a string and this is
an integer, and I've got two values now,

178
00:10:23.650 --> 00:10:27.345
question mark, question mark, and so
this looks a little more like a two-tuple.

179
00:10:27.345 --> 00:10:30.760
Because it's got parentheses,
album is the first parameter, and

180
00:10:30.760 --> 00:10:32.390
artist_id is the second parameter.

181
00:10:32.390 --> 00:10:33.920
This is a string, that's a number.

182
00:10:35.100 --> 00:10:40.884
And then again the idiom, SELECT id FROM
Album WHERE title equals the logical key.

183
00:10:40.884 --> 00:10:43.695
And fetch one row, grab the first thing,

184
00:10:43.695 --> 00:10:45.120
because there's only
one thing I asked for.

185
00:10:45.120 --> 00:10:47.880
So the sub zero, and
stick that in album_id.

186
00:10:47.880 --> 00:10:52.080
So we do this to the extent that,
that's how we establish

187
00:10:52.080 --> 00:10:56.190
what the primary key of that album is,
whether we inserted it or not.

188
00:10:56.190 --> 00:10:58.640
And then we insert the track, finally.

189
00:10:58.640 --> 00:11:01.380
So we're going to do this one
a little bit differently.

190
00:11:01.380 --> 00:11:04.880
Now I don't think the data we're
looking at would have any duplicates,

191
00:11:04.880 --> 00:11:06.600
but what if it did?

192
00:11:06.600 --> 00:11:08.990
So we're going to do an INSERT OR REPLACE.

193
00:11:08.990 --> 00:11:13.310
So an insert, INSERT INTO, would
fail if the key was already there,

194
00:11:13.310 --> 00:11:18.150
because I made title a unique key,
right there.

195
00:11:18.150 --> 00:11:22.030
I made title unique indicating to some
degree that it's going to be a logical

196
00:11:22.030 --> 00:11:25.470
key and I only want one row with a title,
I don't allow duplicates.

197
00:11:25.470 --> 00:11:28.530
So this don't allow duplicates
sometimes if would blow you up, or

198
00:11:28.530 --> 00:11:32.420
sometimes you can use it to trigger,
with these insert or ignores, or insert or

199
00:11:32.420 --> 00:11:35.490
replaces, to create behavior
that you want to create.

200
00:11:35.490 --> 00:11:38.530
This is an example where
you're using a CREATE TABLE

201
00:11:38.530 --> 00:11:42.100
to set rules that you think are terrible
rules, but then you're like, whoa, no, no,

202
00:11:42.100 --> 00:11:44.120
I'm taking advantage of those rules.

203
00:11:44.120 --> 00:11:47.830
So you put rules into the CREATE statement
that then you can take advantage of

204
00:11:47.830 --> 00:11:49.280
as a software developer.

205
00:11:49.280 --> 00:11:51.210
So, INSERT OR REPLACE.

206
00:11:51.210 --> 00:11:57.700
And what that says is, if the title
doesn't exist, then insert the rows.

207
00:11:57.700 --> 00:11:59.960
If it does, then update it. Okay?

208
00:11:59.960 --> 00:12:04.340
Now you won't change the title,
but you would update all the rest of it.

209
00:12:04.340 --> 00:12:05.730
Now we could do this with two lines.

210
00:12:05.730 --> 00:12:06.890
We could do a SELECT.

211
00:12:06.890 --> 00:12:08.390
We could check if it's already there.

212
00:12:08.390 --> 00:12:10.180
We could do an INSERT
if it wasn't there and an

213
00:12:10.180 --> 00:12:14.080
UPDATE if it was there, or
we can do all this in one line.

214
00:12:14.080 --> 00:12:18.300
And when you're dealing with SQL, the
extent to which you can condense three or

215
00:12:18.300 --> 00:12:24.520
four SQL statements into one is actually
something you really like a lot.

216
00:12:24.520 --> 00:12:27.800
And so, how can I do this in one
SQL statement is actually a very

217
00:12:27.800 --> 00:12:28.480
very common question.

218
00:12:29.950 --> 00:12:32.460
And so we're going to do INSERT OR
REPLACE INTO Track and then we

219
00:12:32.460 --> 00:12:36.500
got the pieces - the title, the album, id,
foreign key, which we have to explicitly

220
00:12:36.500 --> 00:12:41.680
put in; the length, rating, and count, which
we simply pulled in from the XML.

221
00:12:41.680 --> 00:12:43.360
Now these might be None, and

222
00:12:43.360 --> 00:12:46.540
if these variables are None it
will insert a null in that field.

223
00:12:46.540 --> 00:12:50.410
And so we have five little question
marks and then a five-tuple.

224
00:12:50.410 --> 00:12:54.180
This is a second parameter which is a
five-tuple, which is the name, the album_id,

225
00:12:54.180 --> 00:12:55.320
the length, the rating, and the count.

226
00:12:56.710 --> 00:13:01.960
And then we say commit to make sure
the whole thing gets written to disk.

227
00:13:01.960 --> 00:13:03.330
And then we're done.

228
00:13:03.330 --> 00:13:04.130
We're absolutely all done.

229
00:13:05.160 --> 00:13:08.910
So we're reading some XML,
we're parsing the XML,

230
00:13:08.910 --> 00:13:11.660
we're doing some sanity
checking on the XML.

231
00:13:11.660 --> 00:13:15.150
We print and then we're
establishing the primary keys and

232
00:13:15.150 --> 00:13:17.940
then using them like a statement later.

233
00:13:17.940 --> 00:13:20.800
And I said to you,
it's a lot easier in Python,

234
00:13:20.800 --> 00:13:24.180
because you don't have to write a little
note about what that primary key was, so

235
00:13:24.180 --> 00:13:26.130
you can put it in
a later insert statement.

236
00:13:26.130 --> 00:13:27.420
So we don't really worry about it.

237
00:13:27.420 --> 00:13:29.480
Python's taking care of all these for us.

238
00:13:29.480 --> 00:13:31.640
Insert it, get the primary keys,
stick that stuff in.

239
00:13:32.950 --> 00:13:33.450
Okay.

240
00:13:33.450 --> 00:13:34.560
So let's go run it.

241
00:13:34.560 --> 00:13:36.210
Which will be, hopefully it will work.

242
00:13:36.210 --> 00:13:38.110
Hopefully it will work.

243
00:13:38.110 --> 00:13:39.620
Do, do, do.

244
00:13:39.620 --> 00:13:41.680
Okay.
So I'm in the Tracks database.

245
00:13:41.680 --> 00:13:43.140
Okay.
And there we go.

246
00:13:43.140 --> 00:13:47.520
So you'll notice that there
is no file there and I say,

247
00:13:47.520 --> 00:13:52.663
python tracks.py, and
it's just going to read that XML file,

248
00:13:52.663 --> 00:13:57.631
[SOUND] parse, parse, parse,
and then I'll just hit enter.

249
00:13:57.631 --> 00:14:01.892
And so there it goes, it just read,

250
00:14:01.892 --> 00:14:08.550
it found the title,
it found the podcast.

251
00:14:08.550 --> 00:14:13.260
None and None are things like it must have
no length and it must have something.

252
00:14:13.260 --> 00:14:16.070
Oh no, it must have no count and
no rating, because those would be rating.

253
00:14:16.070 --> 00:14:19.160
So there's rating and count, or
count and rating, I don't know.

254
00:14:19.160 --> 00:14:21.560
But it ran, it just went and ran.

255
00:14:21.560 --> 00:14:25.170
And so let's go take a look at
that database.

256
00:14:25.170 --> 00:14:27.260
So let me open a file.

257
00:14:27.260 --> 00:14:32.340
Open Database and then go into Track,

258
00:14:32.340 --> 00:14:39.040
Tracks, Tracks.

259
00:14:39.040 --> 00:14:39.930
And then there it is.

260
00:14:39.930 --> 00:14:43.400
That file didn't exist, but now that
we have run it, that file now exists.

261
00:14:44.470 --> 00:14:46.080
And here we go,
we can take a look at the data.

262
00:14:47.270 --> 00:14:49.580
Whoosh, all kinds of stuff.

263
00:14:49.580 --> 00:14:52.250
Let's start from
the outside of the tree in.

264
00:14:52.250 --> 00:14:54.950
Let's go to Artist,
which is kind of the leaf of the tree.

265
00:14:54.950 --> 00:14:57.110
So here are all my artists.

266
00:14:57.110 --> 00:15:00.120
And you see I have 317 different artists.

267
00:15:00.120 --> 00:15:03.690
And it just inserted,
maintained, made use of them.

268
00:15:03.690 --> 00:15:05.772
These are now the primary keys for
these things.

269
00:15:09.685 --> 00:15:13.279
They don't go up in order, which I don't
fully understand why, but I don't care,

270
00:15:13.279 --> 00:15:14.380
that's fine.

271
00:15:14.380 --> 00:15:16.900
All that matters is Queen is 1 and
Rammstein is 2.

272
00:15:16.900 --> 00:15:19.370
Various is, Pink Floyd,
Led Zeppelin, AC/DC.

273
00:15:19.370 --> 00:15:24.990
You can see I have a strange
set of tastes in my thing.

274
00:15:24.990 --> 00:15:27.390
So then we have albums, right?

275
00:15:27.390 --> 00:15:29.290
So the Album has nothing
but titles, right?

276
00:15:29.290 --> 00:15:33.600
And it has an artist_id,
which is a foreign key, and

277
00:15:33.600 --> 00:15:36.290
then it has a primary key, right?

278
00:15:36.290 --> 00:15:40.260
And then if we go to the Track,
the Track has a title.

279
00:15:40.260 --> 00:15:41.780
It has a primary key.

280
00:15:41.780 --> 00:15:43.850
album_id is a foreign key.

281
00:15:43.850 --> 00:15:46.670
Length, rating, and
count are just data inside of it.

282
00:15:46.670 --> 00:15:50.120
And so you can kind of play with this and
you can run SELECT statements on it,

283
00:15:50.120 --> 00:15:51.490
you can do whatever.

284
00:15:51.490 --> 00:15:58.470
So in a way writing this all in Python
is a whole bunch easier than doing

285
00:15:58.470 --> 00:16:03.740
it by hand, because we get to have those
primary keys for the artist and the album,

286
00:16:03.740 --> 00:16:07.470
and we just put them in variables and
we pass them back into the SQL.

287
00:16:07.470 --> 00:16:08.010
And away they go.

288
00:16:09.250 --> 00:16:13.370
So I think this is a pretty cool, this
like, brings a lot of things together for

289
00:16:13.370 --> 00:16:16.910
me that we've been working on for
this whole class.

290
00:16:16.910 --> 00:16:20.930
So I hope you enjoy this
example as much as I did.