WEBVTT

1
00:00:08.888 --> 00:00:11.030
So now we're going to go
through some example code.

2
00:00:11.030 --> 00:00:12.018
The emaildb.

3
00:00:12.018 --> 00:00:16.403
Now, what we're going to do here is
we're going to read the file mbox,

4
00:00:16.403 --> 00:00:18.968
or mbox.txt, that we've been doing.

5
00:00:18.968 --> 00:00:21.730
And we are going to put that
stuff into a database.

6
00:00:21.730 --> 00:00:22.490
So we're going to read it.

7
00:00:22.490 --> 00:00:23.670
We're going to parse it.

8
00:00:23.670 --> 00:00:27.412
And you know how we did a dictionary but
now we're going to do it in a database.

9
00:00:27.412 --> 00:00:29.990
It's kind of like we're taking the
dictionary and putting it in a database.

10
00:00:29.990 --> 00:00:32.320
And if I talk about dictionaries,
you recall I said,

11
00:00:32.320 --> 00:00:35.020
dictionaries are like a real
cool in-memory database.

12
00:00:35.020 --> 00:00:39.540
Now we're flipping it and we're going to
go do a out-of-memory database.

13
00:00:39.540 --> 00:00:41.740
So let's take a look at the code,
so here we go.

14
00:00:41.740 --> 00:00:44.480
The name of this file is emaildb and

15
00:00:44.480 --> 00:00:49.890
it's in the code on pythonlearn.com,
code folder on pythonlearn.com.

16
00:00:49.890 --> 00:00:53.640
And so, import sqlite3, well that is importing
the library that we're going to

17
00:00:53.640 --> 00:00:54.990
use to talk to the SQL database.

18
00:00:56.250 --> 00:01:02.990
So, this line here basically says, we're
going to use a database in this application

19
00:01:02.990 --> 00:01:07.450
and we're going to store that database
in the file emaildb.sqllite.

20
00:01:07.450 --> 00:01:10.950
So we're going to call library routines in
SQLite and that's going to read and

21
00:01:10.950 --> 00:01:11.790
write to that disk.

22
00:01:12.800 --> 00:01:14.140
It's not a file we want to mess with.

23
00:01:14.140 --> 00:01:15.250
We have a viewer for it.

24
00:01:15.250 --> 00:01:19.030
called the SQLite browser
that we will be able to view this.

25
00:01:19.030 --> 00:01:24.230
And so this basically says it's
creating a connection object and

26
00:01:24.230 --> 00:01:27.840
the connection object says, let's make
a connection to a file, basically, but

27
00:01:27.840 --> 00:01:31.360
we're really talking a library
code that SQLite3.

28
00:01:31.360 --> 00:01:33.400
And so that's what this does.

29
00:01:33.400 --> 00:01:35.628
And open takes two steps,
kind of like sockets.

30
00:01:35.628 --> 00:01:38.930
So you sort of start with this and
then you actually

31
00:01:38.930 --> 00:01:43.920
create a thing through which you can send
commands, called what's called a cursor.

32
00:01:43.920 --> 00:01:46.970
It's like the command or
the row that's coming back,

33
00:01:46.970 --> 00:01:51.550
those are all cursors. And so we take the
connection object and we ask for a cursor.

34
00:01:51.550 --> 00:01:52.980
And so we get the cursor back and

35
00:01:52.980 --> 00:01:56.690
this cur variable now has
the cursor object in it.

36
00:01:56.690 --> 00:02:00.440
So we have the cursor object and
we call the execute method, and

37
00:02:00.440 --> 00:02:04.740
this is just a triple-quoted string that
I broke in the line just so we could see it.

38
00:02:04.740 --> 00:02:08.820
And so what we're going to do is we're
going to create a table called Counts.

39
00:02:08.820 --> 00:02:11.580
And every time we're going to run this
program, we're not going to have to

40
00:02:11.580 --> 00:02:14.760
remove the file, we're just going to drop
the table Counts and then create it again.

41
00:02:14.760 --> 00:02:17.950
And then we're going to
a CREATE statement here, so

42
00:02:17.950 --> 00:02:21.580
we're going to start the connection,
send a DROP TABLE, this is like

43
00:02:21.580 --> 00:02:24.940
typing DROP TABLE in the little SQL
browser that we were playing with.

44
00:02:24.940 --> 00:02:27.500
And then we're going to create
a table called Counts

45
00:02:27.500 --> 00:02:31.570
with an email address that's text and
an integer field called count.

46
00:02:31.570 --> 00:02:33.250
So we just made a table.

47
00:02:33.250 --> 00:02:35.730
And again, in Python we're
just sending these commands.

48
00:02:37.400 --> 00:02:38.638
Now it's going to look a little familiar.

49
00:02:38.638 --> 00:02:40.710
We're going to prompt for a file name.

50
00:02:40.710 --> 00:02:42.180
And if it's not less than one,

51
00:02:42.180 --> 00:02:44.258
we're going to assume mbox-short.txt.

52
00:02:44.258 --> 00:02:48.480
We're going to open it. Again,
this is really familiar.

53
00:02:48.480 --> 00:02:50.370
for line in file handler.

54
00:02:50.370 --> 00:02:52.550
If the line doesn't start
with From: , continue.

55
00:02:52.550 --> 00:02:57.390
That's familiar, that's our throw away all
the lines except for those that say From.

56
00:02:57.390 --> 00:02:59.350
Then we're going to split them.

57
00:02:59.350 --> 00:03:00.726
And we're going to grab pieces sub one,

58
00:03:00.726 --> 00:03:03.770
because that's what happens after
the From:

59
00:03:03.770 --> 00:03:07.880
Okay, so this part right here looks
exactly like code you've

60
00:03:07.880 --> 00:03:10.330
probably written 15 times by now.

61
00:03:10.330 --> 00:03:11.840
But now it's different.

62
00:03:11.840 --> 00:03:12.975
So we have this email address.

63
00:03:12.975 --> 00:03:16.070
You know, csev@umich.edu or whatever.

64
00:03:16.070 --> 00:03:18.260
So we're going to ask our database.

65
00:03:18.260 --> 00:03:21.910
SELECT count FROM the Counts
table WHERE email equals.

66
00:03:21.910 --> 00:03:23.960
And then we have this
little question mark guy.

67
00:03:23.960 --> 00:03:27.230
The question mark is a place
holder to be filled in and

68
00:03:27.230 --> 00:03:30.350
so that says this is going to be something.

69
00:03:30.350 --> 00:03:34.030
And then we have a second parameter,
and this syntax, you'll get used to it,

70
00:03:34.030 --> 00:03:35.430
it looks a little bit weird.

71
00:03:35.430 --> 00:03:37.906
This is a tuple.

72
00:03:37.906 --> 00:03:39.306
Tuple.

73
00:03:39.306 --> 00:03:42.819
Parentheses thing. We only really need 
one in this tuple, but

74
00:03:42.819 --> 00:03:47.020
if you don't put the comma then
it thinks it's an expression.

75
00:03:47.020 --> 00:03:51.800
So a single tuple is, you know,
parenthesis email comma and

76
00:03:51.800 --> 00:03:56.420
that's a one-tuple, and the first thing in
the tuple is what will be substituted for

77
00:03:56.420 --> 00:03:58.900
the question mark, okay?

78
00:03:58.900 --> 00:04:03.742
And so this is saying SELECT count
FROM Counts WHERE email equals

79
00:04:03.742 --> 00:04:08.310
csev@umich.edu as if it were in quotes,
but this is how we substitute things in.

80
00:04:08.310 --> 00:04:10.650
Because if we did string
concatenation, which we could do,

81
00:04:10.650 --> 00:04:12.260
there's certain dangerous
things that happen.

82
00:04:12.260 --> 00:04:15.890
And so we do this parameter
substitution with these question marks

83
00:04:15.890 --> 00:04:18.460
to avoid what's called SQL injection.

84
00:04:18.460 --> 00:04:21.510
But don't worry about that.

85
00:04:21.510 --> 00:04:23.320
Then what we got is the cursor is, so

86
00:04:23.320 --> 00:04:26.360
the cursor now has done a SELECT,
that has what's called a row set.

87
00:04:26.360 --> 00:04:28.920
And that's all the rows
that would have met that.

88
00:04:28.920 --> 00:04:31.380
Including potentially no rows whatsoever.

89
00:04:31.380 --> 00:04:33.870
So we take that cursor we call fetchone.

90
00:04:33.870 --> 00:04:38.820
fetchone brings us back one row into
memory and gives it to us as a list.

91
00:04:38.820 --> 00:04:43.436
[SOUND] As a list and then sub zero,
seeing as how we only selected one thing,

92
00:04:43.436 --> 00:04:45.578
this list only has one thing in it.

93
00:04:45.578 --> 00:04:46.980
So the sub zero.

94
00:04:46.980 --> 00:04:51.860
And that is the count field from
the database, so that's how we get the row

95
00:04:51.860 --> 00:04:57.550
fetched and pull it in, and I put this in
a try/except block in case it's not there.

96
00:04:57.550 --> 00:04:59.290
So this might blow up

97
00:04:59.290 --> 00:05:00.170
if there is no row.

98
00:05:00.170 --> 00:05:03.420
If I got zero rows, then this
fetchone is going to blow up and

99
00:05:03.420 --> 00:05:04.930
it's going to come down to the except.

100
00:05:04.930 --> 00:05:07.670
But let's just say it's already
there, then what I'm going to do

101
00:05:07.670 --> 00:05:11.750
is I'm going to run another
thing that says UPDATE, SQL,

102
00:05:11.750 --> 00:05:15.930
the database table Counts SET
the column count equals count plus one,

103
00:05:15.930 --> 00:05:18.860
the current value, WHERE email equals and
then again, this

104
00:05:18.860 --> 00:05:23.280
little question mark pattern and using
the variable email as the WHERE clause.

105
00:05:23.280 --> 00:05:27.603
And so that actually takes in our
little database, we have a row and

106
00:05:27.603 --> 00:05:30.608
a column and that takes that
from a 1 to a 2.

107
00:05:30.608 --> 00:05:32.597
That's what it does if it's
got the right email address.

108
00:05:34.190 --> 00:05:38.420
If this try fails, there was no row,
then we're going to use an INSERT.

109
00:05:38.420 --> 00:05:40.675
We're going to add a new row at
the end of the table, and

110
00:05:40.675 --> 00:05:45.070
we're going to INSERT INTO Counts
using the email and the count.

111
00:05:45.070 --> 00:05:47.780
And again we'll use the little
question mark thing.

112
00:05:47.780 --> 00:05:48.940
And the count starts at 1.

113
00:05:48.940 --> 00:05:51.750
So we'll put a new person in,
Jen or whoever is going in, and

114
00:05:51.750 --> 00:05:54.280
we give her a 1 when she starts out.

115
00:05:54.280 --> 00:05:56.830
And then we do this thing called
commit, okay?

116
00:05:56.830 --> 00:06:00.310
And so commit basically says,
if you've been doing stuff in

117
00:06:00.310 --> 00:06:04.140
memory, dear SQLite,
please write it back to disk.

118
00:06:04.140 --> 00:06:07.940
And so commit is a very important part
to say, everything I've done up till

119
00:06:07.940 --> 00:06:12.470
now, there is one step and
maybe two steps here,

120
00:06:12.470 --> 00:06:16.250
they don't always have, not always been
written to disk but until you say commit.

121
00:06:16.250 --> 00:06:17.440
And when it comes out of commit,

122
00:06:17.440 --> 00:06:21.220
then everything on disk matches all
the commands that you typed, okay?

123
00:06:23.140 --> 00:06:23.820
Okay.

124
00:06:23.820 --> 00:06:26.160
So, if we look at how
this code is going to run,

125
00:06:26.160 --> 00:06:31.170
it's going to read all the From addresses
just like this and this is like our .get.

126
00:06:31.170 --> 00:06:36.130
Remember the get with the default value
and the plus one? We're either going to

127
00:06:36.130 --> 00:06:40.340
insert a new one in with a value of 1 or
we're going to update and increment it.

128
00:06:40.340 --> 00:06:44.220
So at the end of the day we're going to have
a table that's the name and the count.

129
00:06:44.220 --> 00:06:46.260
Name, count, name, count, name, count.

130
00:06:46.260 --> 00:06:48.500
So that's what this loop does.

131
00:06:48.500 --> 00:06:51.180
Then the last thing we're
going to do is we're going to

132
00:06:51.180 --> 00:06:53.270
do a SELECT statement to read the stuff.

133
00:06:53.270 --> 00:06:56.990
Again, very similar to the
dictionary assignment.

134
00:06:56.990 --> 00:06:59.960
So we're going to say,
SELECT email, count.

135
00:06:59.960 --> 00:07:05.510
Two columns from the Counts table, and
we're going to order this by the count, count

136
00:07:05.510 --> 00:07:09.690
and we're going to do this descending, so
the large numbers are going to be at the top.

137
00:07:09.690 --> 00:07:12.880
And LIMIT 10 is a bit of SQL that says,

138
00:07:12.880 --> 00:07:15.840
oh look, there might be a thousand
records but only give me the first 10.

139
00:07:15.840 --> 00:07:20.870
And this limit applies after the ORDER BY,
so this is a way of us saying,

140
00:07:20.870 --> 00:07:25.070
the top 10 contributors or
the top 10 email senders.

141
00:07:25.070 --> 00:07:27.474
Then what we do is we call cur.execute.

142
00:07:28.560 --> 00:07:33.390
And we run that SQL, and then we have an
iterator that's going to go through the for.

143
00:07:33.390 --> 00:07:37.480
So we're going to get some number
of rows of the people up to 10.

144
00:07:37.480 --> 00:07:41.650
And then row is going to be an iteration
variable that just walks through the rows,

145
00:07:41.650 --> 00:07:43.140
pulling each row from the database.

146
00:07:43.140 --> 00:07:44.160
It could be a million rows.

147
00:07:44.160 --> 00:07:45.640
It could be zero rows.

148
00:07:45.640 --> 00:07:50.390
Or it could be ten rows. And the row
that we get, of course, is an array so

149
00:07:50.390 --> 00:07:54.330
that sub zero is the email and
sub one is the count.

150
00:07:54.330 --> 00:07:58.750
And we convert this to the string in
case it had some Unicode in it so

151
00:07:58.750 --> 00:07:59.730
that it prints out properly.

152
00:07:59.730 --> 00:08:03.850
And so you'll see us use this little str
guy sometimes when we pull stuff out of

153
00:08:03.850 --> 00:08:08.230
the database, because it might be in
like UTF-8 if it has sort of like a

154
00:08:08.230 --> 00:08:10.810
funny character on the top or whatever.

155
00:08:10.810 --> 00:08:13.900
And then when we're all done, so
that loop runs and we see the top ten, and

156
00:08:13.900 --> 00:08:18.220
then we close the cursor and
then we're all said and done, okay?

157
00:08:18.220 --> 00:08:19.925
And so that is our program.

158
00:08:19.925 --> 00:08:23.569
That's the program.

159
00:08:23.569 --> 00:08:25.535
Okay, so let's go ahead and run it.

160
00:08:25.535 --> 00:08:28.540
This'll be not too exciting.

161
00:08:28.540 --> 00:08:29.530
So here I am.

162
00:08:29.530 --> 00:08:34.330
I can say python emaildb.py, okay?

163
00:08:35.510 --> 00:08:41.558
And I can say mbox-short.txt.

164
00:08:41.558 --> 00:08:47.676
Now, actually before I say that,
let me go ahead and

165
00:08:47.676 --> 00:08:53.239
run the SQLite browser,
and open a database and

166
00:08:53.239 --> 00:08:57.451
go into my desktop, pythonlearn.

167
00:08:57.451 --> 00:09:00.987
code, and then I think,

168
00:09:00.987 --> 00:09:05.348
if all's well, see email.sqlite.

169
00:09:05.348 --> 00:09:09.097
Now the reason I'm opening this now,
before I hit enter here,

170
00:09:09.097 --> 00:09:12.660
is you can see that the database
structure already exists, okay?

171
00:09:13.670 --> 00:09:16.450
And that's because if
I go back to my code.

172
00:09:16.450 --> 00:09:21.394
If I go back to my code,

173
00:09:21.394 --> 00:09:26.548
and I didn't have to do this.

174
00:09:26.548 --> 00:09:31.094
But basically it made a connection to the
database, it dropped an existing table and

175
00:09:31.094 --> 00:09:34.039
it recreated the table, and
then it paused and waited for

176
00:09:34.039 --> 00:09:36.660
the file name that I wanted to work with.

177
00:09:36.660 --> 00:09:40.010
And so the table's actually created and
the file's actually created.

178
00:09:41.940 --> 00:09:43.770
Might have needed to
put a commit in there.

179
00:09:43.770 --> 00:09:45.440
But there we are, okay?

180
00:09:45.440 --> 00:09:46.158
So there is

181
00:09:46.158 --> 00:09:46.890
our email.

182
00:09:49.888 --> 00:09:51.890
And now I'm going to press enter.

183
00:09:51.890 --> 00:09:56.930
So what this is going to do is read and then
insert/create, insert/create.

184
00:09:56.930 --> 00:09:59.000
And update.
And so it ran.

185
00:09:59.000 --> 00:10:03.905
And this here is the output
of that SELECT statement.

186
00:10:03.905 --> 00:10:05.970
And it looks very familiar.

187
00:10:05.970 --> 00:10:10.810
We've basically implemented a dictionary
using a database, which is the difference

188
00:10:10.810 --> 00:10:15.010
between a dictionary and a database is we
could have 100 million records in this and

189
00:10:15.010 --> 00:10:16.400
not run our computer out of memory,

190
00:10:16.400 --> 00:10:19.020
because dictionaries all live in
the memory of the computer.

191
00:10:19.020 --> 00:10:23.130
So now if I come over here to the
browser and I take a look at the data and

192
00:10:23.130 --> 00:10:28.250
I hit refresh, looky here. So I can click
on this count and we can get it sorted.

193
00:10:29.250 --> 00:10:30.980
So there we go, and
that's it's now sorted.

194
00:10:30.980 --> 00:10:33.670
And you can see there's
a total of eleven records.

195
00:10:33.670 --> 00:10:36.720
Not very exciting, you know.
And there they are.

196
00:10:36.720 --> 00:10:40.240
And so the Counts show up, that's
the only table that I've got.

197
00:10:40.240 --> 00:10:45.060
So now what can happen
is I can run it again.

198
00:10:45.060 --> 00:10:47.018
python emaildb.py

199
00:10:47.018 --> 00:10:55.238
But this time instead I'm
going to do the whole mbox.txt.

200
00:10:55.238 --> 00:10:57.858
Takes little longer,
little longer [NOISE].

201
00:10:57.858 --> 00:11:02.519
Okay. so now it did a lot more, and
I don't have to reopen it because I

202
00:11:02.519 --> 00:11:06.610
didn't actually delete and
recreate the database.

203
00:11:06.610 --> 00:11:08.920
So I can actually just
hit this refresh button.

204
00:11:08.920 --> 00:11:12.680
And then it goes and reads the thing
and there's 46 people and

205
00:11:12.680 --> 00:11:15.910
if I hit the count,
then I can see it sorted by count.

206
00:11:15.910 --> 00:11:19.540
I can see it sorted by email,
etc., etc., etc.

207
00:11:19.540 --> 00:11:22.840
And so now we have our classic thing,

208
00:11:22.840 --> 00:11:26.740
except what we're doing is
writing a database, okay?

209
00:11:26.740 --> 00:11:27.240
Thanks.